name: Terraform

on: workflow_dispatch

permissions:
  contents: read

jobs:
  deploy_backend_for_terraform:
    name: 'AZ CLI Terraform Backend'
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show
    - name: Create RG and Storage account
      run: |
        export MY_RESOURCE_GROUP_NAME="rg-terraform-state"
        export REGION="westeurope"
        export MY_STORAGE_ACCOUNT_NAME="tfstate$DATE"
        export MY_CONTAINER_NAME="tfstate"
                
        if [ "$(az group list -o tsv --query "[?name=='$MY_RESOURCE_GROUP_NAME'].name")" = "" ];
        then
            echo "No RG was found."
            az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
        else
            echo "RG was found."
        fi

        if [ "$(az storageaccount list -o tsv --query "[?name=='$MY_STORAGE_ACCOUNT_NAME'].name")" = "" ];
        then
            echo "No storageaccount was found."
            az storageaccount create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_STORAGE_ACCOUNT_NAME --sku Standard_LRS
            az storage container create --name $MY_CONTAINER_NAME --account-name $MY_STORAGE_ACCOUNT_NAME
        else
            echo "StorageAccount was found."
        fi


  terraform:
    name: 'Terraform'
    env: 
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production
  
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

     # On push to "master", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false 
      