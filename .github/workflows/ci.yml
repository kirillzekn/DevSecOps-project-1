name: CI Pipeline

on: workflow_dispatch

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  sonar-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
        
      - name: Install NPM dependencies
        run: |
          npm install
          echo "Dependencies have been installed."

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk-scan:
    needs: sonar-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
         
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Snyk Authenticate    
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  build-docker-image:
    needs: snyk-scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    defaults:
      run:
        working-directory: ./application
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./application
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devsecops_project_1:${{ github.run_number }}

      - name: Run tivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/devsecops_project_1:${{ github.run_number }}
          format: "sarif"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: list files
        run: |
          ls -l
          pwd
          ls -l ../
      # - name: Trivy scan
      #   run: |
      #     docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${{ secrets.DOCKERHUB_USERNAME }}/devsecops_project_1:{{ github.run_number }} --severity HIGH,CRITICAL --format sarif > trivy-results.sarif
      
      - name: Upload trivy report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '../trivy-results.sarif'

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyc-token: ${{ secrets.SNYK_TOKEN }}
      
      - name: Snyk auth
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
      
      - name: Snyk Container monitor
        run: |
          snyk container monitor ${{ secrets.DOCKERHUB_USERNAME }}/devsecops_project_1:${{ github.run_number }} --file=./Dockerfile
        working-directory: ./application
      
      - name: Snyk to check for vulnerabilities in docker image
        uses: snyk/actions/docker@master
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/devsecops_project_1:${{ github.run_number }}
          args: --file=application/Dockerfile --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  k8s-manifest-scan:
    needs: snyk-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run Snyk to check k8s manifect
        uses: snyk/actions/iac@master
        with:
          args:
            --severity-threshold=high
            --report
          file: k8s-manifest/
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true




      # - name: Azure login
      #   uses: azure/login@v2
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Azure CLI script
      #   uses: azure/cli@v2
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       az account show
      
      # - name: setup k8s profile
      #   run: |
      #     export MY_RESOURCE_GROUP_NAME="zekn-aks-rg"
      #     export MY_CLUSTER_NAME="zekn-aks-cluster"
      #     az aks get-credentials --admin --name $MY_CLUSTER_NAME --overwrite-existing --resource-group $MY_RESOURCE_GROUP_NAME
          
      # - name: Deploy to AKS
      #   run: |
      #     kubectl apply -f k8s/deployment.yaml
      #     kubectl apply -f k8s/service.yaml
