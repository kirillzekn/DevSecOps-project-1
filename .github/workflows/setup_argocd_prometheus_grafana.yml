name: Setup ArgoCD, Prometheus, Grafana

on: workflow_dispatch

permissions:
  id-token: write
  contents: read

jobs:
  setup-argocd-prometheus-grafana:
      runs-on: ubuntu-latest
      steps:
        - name: Install helm
          run: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
            helm version

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Azure CLI script
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
              az account show
      
        - name: setup k8s profile
          run: |
            export MY_RESOURCE_GROUP_NAME="zekn_aks_rg"
            export MY_CLUSTER_NAME="zekn-aks"
            az aks get-credentials --admin --name $MY_CLUSTER_NAME --overwrite-existing --resource-group $MY_RESOURCE_GROUP_NAME

        - name: setup ArdoCD
          run: |
            kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            sleep 5
            kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
            sleep 5

        - name: Install ArgoCD CLI
          run: |
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            curl -sSL -o argocd-linux-amd64.sha256 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64.sha256
            shasum -a 256 -c argocd-linux-amd64.sha256
            mv argocd-linux-amd64 /usr/local/bin/argocd
            chmod +x /usr/local/bin/argocd
            argocd version

        - name: ArgoCD login
          run: |
            ARGOCD_SERVER_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo $ARGOCD_SERVER_IP
            ARGOCD_SERVER_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
            argocd login $ARGOCD_SERVER_IP --username admin --password $ARGOCD_SERVER_PASSWORD --insecure

            argocd app create starter-kit-apps \
              --repo https://github.com/kirillzekn/DevSecOps-project-1.git
              --path k8s-manifest/argocd/apps
              --dest-server https://kubernetes.default.svc
              --dest-namespace argocd
              --sync-policy automated
              --self-heal
              --auto-prune
              --sync-option CreateNamespace=true
              --sync-option ApplyOutOfSyncOnly=true
              --sync-option SyncWave=0

            argocd app sync starter-kit-apps



        - name: setup Prometheus
          run: |
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo update
            helm list -A
            helm status prometheus -n monitoring && helm uninstall prometheus -n monitoring || true
            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
            helm install prometheus prometheus-community/prometheus --namespace monitoring
            sleep 5
            kubectl patch svc prometheus-server -n monitoring -p '{"spec": {"type": "LoadBalancer"}}'
        
        - name: setup Grafana
          run: |
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo update
            helm status grafana -n grafana && helm uninstall grafana -n grafana || true
            kubectl create namespace grafana --dry-run=client -o yaml | kubectl apply -f -
            helm install grafana grafana/grafana --namespace grafana
            sleep 5
            kubectl patch svc grafana -n grafana -p '{"spec": {"type": "LoadBalancer"}}'
      # - name: Deploy to AKS
      #   run: |
      #     kubectl apply -f k8s/deployment.yaml
      #     kubectl apply -f k8s/service.yaml